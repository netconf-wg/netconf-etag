



NETCONF                                                      J. Lindblad
Internet-Draft                                             Cisco Systems
Intended status: Standards Track                              3 May 2022
Expires: 4 November 2022


                  Transaction ID Mechanism for NETCONF
              draft-lindblad-netconf-transaction-id-latest

Abstract

   NETCONF clients and servers often need to have a synchronized view of
   the server's configuration data stores.  The volume of configuration
   data in a server may be very large, while data store changes
   typically are small when observed at typical client resynchronization
   intervals.

   Rereading the entire data store and analyzing the response for
   changes is an inefficient mechanism for synchronization.  This
   document specifies an extension to NETCONF that allows clients and
   servers to keep synchronized with a much smaller data exchange and
   without any need for servers to store information about the clients.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/janlindblad/netconf-transaction-id.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 4 November 2022.





Lindblad                 Expires 4 November 2022                [Page 1]

Internet-Draft                    NCTID                         May 2022


Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Conventions and Definitions . . . . . . . . . . . . . . . . .   4
   3.  NETCONF Txid Extension  . . . . . . . . . . . . . . . . . . .   4
     3.1.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.2.  General Txid Principles . . . . . . . . . . . . . . . . .   5
     3.3.  Initial Configuration Retrieval . . . . . . . . . . . . .   6
     3.4.  Subsequent Configuration Retrieval  . . . . . . . . . . .   7
     3.5.  Conditional Transactions  . . . . . . . . . . . . . . . .   9
     3.6.  Other NETCONF Operations  . . . . . . . . . . . . . . . .  11
     3.7.  YANG-Push Subscriptions . . . . . . . . . . . . . . . . .  12
   4.  Txid Mechanisms . . . . . . . . . . . . . . . . . . . . . . .  12
     4.1.  The ETag attribute txid mechanism . . . . . . . . . . . .  12
     4.2.  The Last-Modified attribute txid mechanism  . . . . . . .  13
     4.3.  Common features to both ETag and Last-Modified txid
           mechanisms  . . . . . . . . . . . . . . . . . . . . . . .  14
     4.4.  Txid Mechanism Examples . . . . . . . . . . . . . . . . .  16
       4.4.1.  Initial Configuration Response  . . . . . . . . . . .  16
       4.4.2.  Configuration Response Pruning  . . . . . . . . . . .  21
       4.4.3.  Configuration Change  . . . . . . . . . . . . . . . .  23
       4.4.4.  Conditional Configuration Change  . . . . . . . . . .  27
       4.4.5.  ETags with Other NETCONF Operations . . . . . . . . .  29
     4.5.  YANG-Push . . . . . . . . . . . . . . . . . . . . . . . .  30
   5.  YANG Modules  . . . . . . . . . . . . . . . . . . . . . . . .  32
     5.1.  Base module for txid in NETCONF . . . . . . . . . . . . .  32
     5.2.  Additional support for txid in YANG-Push  . . . . . . . .  35
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  37
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  37
   8.  Changes . . . . . . . . . . . . . . . . . . . . . . . . . . .  37
     8.1.  Major changes in -02 since -01  . . . . . . . . . . . . .  37
     8.2.  Major changes in -01 since -00  . . . . . . . . . . . . .  37
   9.  Normative References  . . . . . . . . . . . . . . . . . . . .  38
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  39



Lindblad                 Expires 4 November 2022                [Page 2]

Internet-Draft                    NCTID                         May 2022


   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  39

1.  Introduction

   When a NETCONF client connects with a NETCONF server, a frequently
   occurring use case is for the client to find out if the configuration
   has changed since it was last connected.  Such changes could occur
   for example if another NETCONF client has made changes, or another
   system or operator made changes through other means than NETCONF.

   One way of detecting a change for a client would be to retrieve the
   entire configuration from the server, then compare the result with a
   previously stored copy at the client side.  This approach is not
   popular with most NETCONF users, however, since it would often be
   very expensive in terms of communications and computation cost.

   Furthermore, even if the configuration is reported to be unchanged,
   that will not guarantee that the configuration remains unchanged when
   a client sends a subsequent change request, a few moments later.

   In order to simplify the task of tracking changes, a NETCONF server
   could implement a meta level checksum over the configuration over a
   datastore or YANG subtree, and offer clients a way to read and
   compare this checksum.  If the checksum is unchanged, clients can
   avoid performing expensive operations.  Such checksums are often
   referred to as a configuration id or transaction id (txid).

   Evidence of a transaction id feature being demanded by clients is
   that several server implementors have built proprietary and mutually
   incompatible mechanisms for obtaining a transaction id from a NETCONF
   server.

   RESTCONF, In conjunction with this, RESTCONF provides a way to make
   configuration changes conditional on the server confiuguration being
   untouched by others.  This mechanism leverages RFC 8040
   (https://tools.ietf.org/html/rfc8040), defines a mechanism for
   detecting changes in configuration subtrees based on Entity-tags
   (ETags) and Last-Modified txid values.RFC 7232
   (https://tools.ietf.org/html/rfc7232) "Hypertext Transfer Protocol
   (HTTP/1.1): Conditional Requests".

   This document defines similar functionality for NETCONF, RFC 6241
   (https://tools.ietf.org/html/rfc6241), and ties this in with YANG-
   Push RFC 8641 (https://tools.ietf.org/html/rfc8641).







Lindblad                 Expires 4 November 2022                [Page 3]

Internet-Draft                    NCTID                         May 2022


2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This document uses the terminology defined in RFC6241
   (https://tools.ietf.org/html/rfc6241), RFC7950
   (https://tools.ietf.org/html/rfc7950), RFC8040
   (https://tools.ietf.org/html/rfc8040), and RFC8641
   (https://tools.ietf.org/html/rfc8641).

   In addition, this document defines the following terms:

   Versioned element  A node in the instantiated YANG data tree for
      which the server maintains a transaction id (txid) value.

3.  NETCONF Txid Extension

   This document describes a NETCONF extension which modifies the
   behavior of get-config, get-data, edit-config, edit-data, discard-
   changes, copy-config, delete-config and commit such that clients are
   able to conditionally retrieve and update the configuration in a
   NETCONF server.

   For servers implementing YANG-Push, an extension for conveying txid
   updates as part of subscription updates is also defined.

   Several low level mechanisms could be defined to fulfill the
   requirements for efficient client-server txid synchronization.  This
   document defines two such mechanisms, the ETag txid mechanism and the
   Last-Modified txid mechanism.  Additional mechanisms could be added
   in future.

3.1.  Use Cases

   The common use cases for such mecahnisms are briefly discussed here.

   Initial configuration retrieval  When the client initially connects
      to a server, it may be interested to acquire a current view of
      (parts of) the server's configuration.

      In order to be able to efficiently detect changes later, it may
      also be interested to store meta level txid information for
      subtrees of the configuration.




Lindblad                 Expires 4 November 2022                [Page 4]

Internet-Draft                    NCTID                         May 2022


   Subsequent configuration retrieval  When a client needs to reread
      (parts of) the server's configuration, it may be interested to
      leverage the txid meta data it has stored by requesting the server
      to prune the response so that it does not repeat configuration
      data that the client is already aware of.

   Configuration update with txid return  When a client issues a
      transaction towards a server, it may be interested to also learn
      the new txid meta data the server has stored for the updated parts
      of the configuration.

   Configuration update with txid specification  When a client issues a
      transaction towards a server, it may be interested to also specify
      the new txid meta data that the server stores for the updated
      parts of the configuration.

   Conditional configuration change  When a client issues a transaction
      towards a server, it may specify txid meta data for the
      transaction in order to allow the server to verify that the client
      is up to date with any changes in the parts of the configuration
      that it is concerned with.  If the txid meta data in the server is
      different than the client expected, the server rejects the
      transaction with a specific error message.

   Subscribe to configuration changes with txid return  When a client
      subscribes to configuration change updates through YANG-Push, it
      may be interested to also learn the the updated txid meta data for
      the changed data trees.

3.2.  General Txid Principles

   All servers implementing a txid mechanism MUST maintain a txid meta
   data value for each configuration datastore supported by the server.
   Txid mechanism implementations MAY also maintain txid meta data
   values for elements deeper in the YANG data tree.  The elements for
   which the server maintains txids are collectively referred to as the
   "versioned elements".

   The server returning txid values for the versioned elements MUST
   ensure the txid values are changed every time there has been a
   configuration change at or below the element associated with the txid
   value.  This means any update of a config true element will result in
   a new txid value for all ancestor versioned elements, up to and
   including the datastore root itself.

   This also means a server MUST update the txid value for any elements
   that change as a result of a configuration change, regardless of
   source, even if the changed elements are not explicitly part of the



Lindblad                 Expires 4 November 2022                [Page 5]

Internet-Draft                    NCTID                         May 2022


   change payload.  An example of this is dependent data under YANG RFC
   7950 (https://tools.ietf.org/html/rfc7950) when- or choice-
   statements.

   The server MUST NOT change the txid value of a versioned element
   unless the element itself or a child element of that element has been
   changed.  The server MUST NOT change any txid values due to changes
   in config false data.

3.3.  Initial Configuration Retrieval

   When a NETCONF server receives a get-config or get-data request
   containing requests for txid values, it MUST return txid values for
   all versioned elements below the point requested by the client in the
   reply.

   The exact encoding varies by mechanism, but all txid mechanisms would
   have a special "txid-request" txid value (e.g. "?") which is
   guaranteed to never be used as a normal txid value.  Clients MAY use
   this special txid value associated with one or more nodes in the data
   tree to indicate to the server that they are interested in txid
   values below that point of the data tree.

        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   get-config                                    |
          |     acls (txid: ?)                              |
          |                                                 |
          |   <------------------------------------------   |
          |   data (txid: 5152)                             |
          |     acls (txid: 5152)                           |
          |       acl A1 (txid: 4711)                       |
          |         aces (txid: 4711)                       |
          |           ace R1 (txid: 4711)                   |
          |             matches ipv4 protocol udp           |
          |       acl A2 (txid: 5152)                       |
          |         aces (txid: 5152)                       |
          |           ace R7 (txid: 4711)                   |
          |             matches ipv4 dscp AF11              |
          |           ace R8 (txid: 5152)                   |
          |             matches udp source-port port 22     |
          |           ace R9 (txid: 5152)                   |
          |             matches tcp source-port port 22     |
          v                                                 v






Lindblad                 Expires 4 November 2022                [Page 6]

Internet-Draft                    NCTID                         May 2022


       Figure 1: Initial Configuration Retrieval.  The server returns
       the requested configuration, annotated with txid values.  The
      most recent change seems to have been an update to the R8 and R9
                                source-port.

3.4.  Subsequent Configuration Retrieval

   Clients MAY request the server to return txid values in the response
   by adding one or more txid values received previously in get-config
   or get-data requests.

   When a NETCONF server receives a get-config or get-data request
   containing an element with a client specified txid value, there are
   several different cases:

   *  The element is not a versioned element, i.e. the server does not
      maintain a txid value for this element.  In this case, the server
      MUST look up the closest ancestor that is a versioned element, and
      use the txid value of that element in the further handling below.

      The datastore root is always a versioned element.

   *  The client specified txid value is different than the server's
      txid value for this element.  In this case the server MUST return
      the contents as it would otherwise have done, adding the txid
      values of all child versioned elements to the response.  In case
      the client has specified txid values for some child elements, then
      these cases MUST be re-evaluated for those elements.

   *  The element is a versioned element, and the client specified txid
      value matches the server's txid value.  In this case the server
      MUST return the element decorated with a special "txid-match" txid
      value (e.g. "=") to the matching element, and child elements
      pruned.  The txid-match value is guaranteed to never be used as a
      normal txid value.

   For list elements, pruning child elements means that key elements
   MUST be included in the response, and other child elements MUST NOT
   be included.  For containers, child elements MUST NOT be included.












Lindblad                 Expires 4 November 2022                [Page 7]

Internet-Draft                    NCTID                         May 2022


        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   get-config                                    |
          |     acls (txid: 5152)                           |
          |       acl A1 (txid: 4711)                       |
          |         aces (txid: 4711)                       |
          |       acl A2 (txid: 5152)                       |
          |         aces (txid: 5152)                       |
          |                                                 |
          |   <------------------------------------------   |
          |   data (txid: =)                                |
          v                                                 v

     Figure 2: Response Pruning.  Client sends get-config request with
       known txid values.  Server prunes response where txid matches
                               expectations.

        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   get-config                                    |
          |     acls (txid: 5152)                           |
          |       acl A1 (txid: 4711)                       |
          |       acl A2 (txid: 5152)                       |
          |                                                 |
          |   <------------------------------------------   |
          |   data (txid: 6614)                             |
          |     acls (txid: 6614)                           |
          |       acl A1 (txid: =)                          |
          |       acl A2 (txid: 6614)                       |
          |         aces (txid: 6614)                       |
          |           ace R7 (txid: 4711)                   |
          |             matches ipv4 dscp AF11              |
          |           ace R8 (txid: 5152)                   |
          |             matches udp source-port port 22     |
          |           ace R9 (txid: 6614)                   |
          |             matches tcp source-port port 830    |
          v                                                 v

      Figure 3: Out of band change detected.  Client sends get-config
       request with known txid values.  Server provides update where
                           changes have happened.








Lindblad                 Expires 4 November 2022                [Page 8]

Internet-Draft                    NCTID                         May 2022


        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   get-config                                    |
          |     acls                                        |
          |       acls A2                                   |
          |         aces                                    |
          |           ace R7                                |
          |             matches                             |
          |               ipv4                              |
          |                 dscp (txid: 4711)               |
          |                                                 |
          |   <------------------------------------------   |
          |   data                                          |
          |     acls                                        |
          |       acl A2                                    |
          |         aces                                    |
          |           ace R7                                |
          |             matches                             |
          |               ipv4                              |
          |                 dscp AF11 (txid: =)             |
          v                                                 v

      Figure 4: Versioned elements.  Server lookup of dscp txid gives
       4711, as closest ancestor is ace R7 with txid 4711.  Since the
          server's and client's txid match, the etag value is '='.

3.5.  Conditional Transactions

   Conditional transactions are useful when a client is interested to
   make a configuration change, being sure that the server configuration
   has not changed since the client last inspected it.

   By supplying the latest txid values known to the client in its change
   requests (edit-config etc.), it can request the server to reject the
   transaction in case any relevant changes have occurred at the server
   that the client is not yet aware of.

   This allows a client to reliably compute and send confiuguration
   changes to a server without either acquiring a global datastore lock
   for a potentially extended period of time, or risk that a change from
   another client disrupts the intent in the time window between a read
   (get-config etc.) and write (edit-config etc.) operation.

   Client that are also interested to know the txid assigned to the
   modified versioned elements in the model immediately in the response
   could set a flag in the rpc message to request the server to return
   the new txid with the ok message.



Lindblad                 Expires 4 November 2022                [Page 9]

Internet-Draft                    NCTID                         May 2022


        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   edit-config (request new txid in response)    |
          |     config (txid: 5152)                         |
          |       acls (txid: 5152)                         |
          |         acl A1 (txid: 4711)                     |
          |           aces (txid: 4711)                     |
          |             ace R1 (txid: 4711)                 |
          |               matches ipv4 protocol tcp         |
          |                                                 |
          |   <------------------------------------------   |
          |   ok (txid: 7688)                               |
          v                                                 v

      Figure 5: Conditional transaction successfully executed.  As all
        the txid values specified by the client matched those on the
             server, the transaction was successfully executed.

        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   get-config                                    |
          |     acls (txid: ?)                              |
          |                                                 |
          |   <------------------------------------------   |
          |   data (txid: 7688)                             |
          |     acls (txid: 7688)                           |
          |       acl A1 (txid: 7688)                       |
          |         aces (txid: 7688)                       |
          |           ace R1 (txid: 7688)                   |
          |             matches ipv4 protocol tcp           |
          |       acl A2 (txid: 6614)                       |
          |         aces (txid: 6614)                       |
          |           ace R7 (txid: 4711)                   |
          |             matches ipv4 dscp AF11              |
          |           ace R8 (txid: 5152)                   |
          |             matches udp source-port port 22     |
          |           ace R9 (txid: 6614)                   |
          |             matches tcp source-port port 830    |
          v                                                 v

      Figure 6: For all leaf objects that were changed, and all their
      ancestors, the txids are updated to the value returned in the ok
     message.  This also applies to any elements implicitly changed by
                 when- and choice- statements (not shown).





Lindblad                 Expires 4 November 2022               [Page 10]

Internet-Draft                    NCTID                         May 2022


   If the server rejects the transaction because the configuration txid
   value differs from the client's expectation, the server MUST return
   an rpc-error with the following values:

      error-tag:      operation-failed
      error-type:     protocol
      error-severity: error

   Additionally, the error-info tag SHOULD contain an sx:structure
   containing relevant details about the mismatching txids.

        Client                                            Server
          |                                                 |
          |   ------------------------------------------>   |
          |   edit-config                                   |
          |     config                                      |
          |       acls                                      |
          |         acl A1 (txid: 4711)                     |
          |           aces (txid: 4711)                     |
          |             ace R1 (txid: 4711)                 |
          |               ipv4 dscp AF22                    |
          |                                                 |
          |   <------------------------------------------   |
          |   rpc-error                                     |
          |     error-tag       operation-failed            |
          |     error-type      protocol                    |
          |     error-severity  error                       |
          |     error-info                                  |
          |       mismatch-path /acls/acl[A1]               |
          |       mismatch-etag-value 6912                  |
          v                                                 v

      Figure 7: Conditional transaction that fails a txid check.  The
          client wishes to ensure there has been no changes to the
       particular acl entry it edits, and therefore sends the txid it
       knows for this part of the configuration.  Since the txid has
        changed (out of band), the server rejects the configuration
      change request and reports an error with details about where the
                           mismatch was detected.

3.6.  Other NETCONF Operations

   discard-changes  The discard-changes operation resets the candidate
      datastore to the contents of the running datastore.  The server
      MUST ensure the txid values in the candidate datastore get the
      same txid values as in the running datastore when this operation
      runs.




Lindblad                 Expires 4 November 2022               [Page 11]

Internet-Draft                    NCTID                         May 2022


   copy-config  The copy-config operation can be used to copy contents
      between datastores.  The server MUST ensure the txid values retain
      the same txid values as in the soruce datastore.

      If copy-config is used to copy from a file, URL or other source
      that is not a datastore, the server MUST ensure the txid values
      are changed for the versioned elements that are changed or have
      child elements changed by the operation.

   delete-config  The server MUST ensure the datastore txid value is
      changed, unless it was already empty.

   commit  At commit, with regards to the txid values, the server MUST
      treat the contents of the candidate datastore as if any txid value
      provided by the client when updating the candidate was provided in
      a single edit-config towards the running datastore.  If the
      transaction is rejected due to txid value mismatch, an rpc-error
      as described in section Conditional Transactions (Section 3.5)
      MUST be sent.

3.7.  YANG-Push Subscriptions

   A client issuing a YANG-Push establish-subscription or modify-
   subscription request towards a server that supports both YANG-Push
   RFC 8641 (https://tools.ietf.org/html/rfc8641) and a txid mechanism
   MAY request that the server provides updated txid values in YANG-Push
   subscription updates.

4.  Txid Mechanisms

   This document defines two txid mechanisms: - The ETag attribute txid
   mechanism - The Last-Modified attribute txid mechanism

   Servers implementing this specification MUST support the ETag
   attribute txid mechanism and MAY support the Last-Modified attribute
   txid mechanism.

   Section NETCONF Txid Extension (Section 3) describes the logic that
   governs the txid mechanisms.  This section describes the mapping from
   the generic logic to specific mechanism and encoding.

4.1.  The ETag attribute txid mechanism

   The ETag txid mechanism described in this section is centered around
   a meta data XML attribute called "etag".  The etag attribute is
   defined in the namespace "urn:ietf:params:xml:ns:netconf:txid:1.0".
   The etag attribute is added to XML elements in the NETCONF payload in
   order to indicate the txid value for the element.



Lindblad                 Expires 4 November 2022               [Page 12]

Internet-Draft                    NCTID                         May 2022


   NETCONF servers that support this extension MUST announce the
   capability "urn:ietf:params:netconf:capability:txid:etag:1.0".

   The etag attribute values are opaque UTF-8 strings chosen freely,
   except that the etag string must not contain space, backslash or
   double quotes.  The point of this restriction is to make it easy to
   reuse implementations that adhere to section 2.3.1 in RFC 7232
   (https://tools.ietf.org/html/rfc7232).  The probability SHOULD be
   made very low that an etag value that has been used historically by a
   server is used again by that server.

   It is RECOMMENDED that the same ETag txid values are used across all
   management interfaces (i.e.  NETCONF, RESTCONF and any other the
   server might implement), if it implements more than one.

   The detailed rules for when to update the etag value are described in
   section General Txid Principles (Section 3.2).  These rules are
   chosen to be consistent with the ETag mechanism in RESTCONF, RFC 8040
   (https://tools.ietf.org/html/rfc8040), specifically sections 3.4.1.2,
   3.4.1.3 and 3.5.2.

4.2.  The Last-Modified attribute txid mechanism

   The Last-Modified txid mechanism described in this section is
   centered around a meta data XML attribute called "last-modified".
   The last-modified attribute is defined in the namespace
   "urn:ietf:params:xml:ns:netconf:txid:1.0".  The last-modified
   attribute is added to XML elements in the NETCONF payload in order to
   indicate the txid value for the element.

   NETCONF servers that support this extension MUST announce the
   capability "urn:ietf:params:netconf:capability:txid:last-
   modified:1.0".

   The last-modified attribute values are yang:date-and-time values as
   defined in ietf-yang-types.yang "2022-04-01T12:34:56.123456Z" is an
   example of what this time stamp format looks like.  It is RECOMMENDED
   that the time stamps provided by the server match the real world
   clock fairly closely.  Servers MUST ensure the timestamps provided
   are monotonously increasing for as long as the server's operation is
   maintained.RFC 6991 (https://datatracker.ietf.org/doc/html/rfc6991).

   It is RECOMMENDED that server implementors choose the number of
   digits of precision used for the fractional second timestamps high
   enough so that there is no risk that multiple transactions on the
   server would get the same timestamp.





Lindblad                 Expires 4 November 2022               [Page 13]

Internet-Draft                    NCTID                         May 2022


   It is RECOMMENDED that the same Last-Modified txid values are used
   across all management interfaces (i.e.  NETCONF and any other the
   server might implement), except RESTCONF.

   RESTCONF is using a different format for the time stamps which is
   limited to one second resolution.  Server implementors that support
   the Last-Modified txid mechanism over both RESTCONF and other
   management protocols are RECOMMENDED to use Last-Modified timestamps
   that match the point in time referenced over RESTCONF, with the
   fractional seconds part added.

   The detailed rules for when to update the last-modified value are
   described in section General Txid Principles (Section 3.2).  These
   rules are chosen to be consistent with the Last-Modified mechanism in
   RESTCONF, RFC 8040 (https://tools.ietf.org/html/rfc8040),
   specifically sections 3.4.1.1, 3.4.1.3 and 3.5.1.

4.3.  Common features to both ETag and Last-Modified txid mechanisms

   Clients MAY add etag and/or last-modified attributes to zero or more
   individual elements in the get-config or get-data filter, in which
   case they pertain to the subtree(s) rooted at the element(s) with the
   attributes.

   Clients MAY also add such attributes directly to the get-config or
   get-data tags (e.g. if there is no filter), in which case it pertains
   to the txid value of the datastore root.

   Clients might wish to send a txid value that is guaranteed to never
   match a server constructed txid.  With both the ETag and Last-
   Modified txid mechanisms, such a txid-request value is "?".

   Clients MAY add etag and/or last-modified attributes to the playload
   of edit-config or edit-data requests, in which case they indicate the
   client's txid value of that element.

   Clients MAY request servers that also implement YANG-Push to return
   configuration change subsription updates with etag and/or last-
   modified txid attributes.  The client requests this service by adding
   a with-etag or with-last-modified flag to the subscription request or
   yang-pusg configuration.  The server returns such txids on the YANG
   Patch edit tag and to the child elements of the value tag.  The txid
   attribute on the edit tag reflects the txid of the parent element of
   the target.







Lindblad                 Expires 4 November 2022               [Page 14]

Internet-Draft                    NCTID                         May 2022


   Servers returning txid values in get-config, edit-config, get-data,
   edit-data and commit operations do so by adding etag and/or last-
   modified txid attributes to the data and ok tags.  When servers prune
   output due to a matching txid value, the server adds a txid-match
   attribute value of "=".

   Servers returning an txid mismatch error MUST return an rpc-error as
   defined in section Conditional Transactions (Section 3.5) with an
   error-info tag containing an txid-value-mismatch-error-info
   structure.

   The txid attributes are valid on the following NETCONF tags, where
   xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0",
   xmlns:ncds="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda",
   xmlns:sn="urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
   xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-patch" and
   xmlns:ypatch="urn:ietf:params:xml:ns:yang:ietf-yang-patch":

   In client messages sent to a server:

   *  /nc:rpc/nc:get-config

   *  /nc:rpc/nc:get-config/nc:filter//*

   *  /nc:rpc/ncds:get-data

   *  /nc:rpc/ncds:get-data/ncds:subtree-filter//*

   *  /nc:rpc/ncds:get-data/ncds:xpath-filter//*

   *  /nc:rpc/nc:edit-config/nc:config

   *  /nc:rpc/nc:edit-config/nc:config//*

   *  /nc:rpc/ncds:edit-data/ncds:config

   *  /nc:rpc/ncds:edit-data/ncds:config//*

   In server messages sent to a client:

   *  /nc:rpc-reply/nc:data

   *  /nc:rpc-reply/nc:data//*

   *  /nc:rpc-reply/ncds:data

   *  /nc:rpc-reply/ncds:data//*




Lindblad                 Expires 4 November 2022               [Page 15]

Internet-Draft                    NCTID                         May 2022


   *  /nc:rpc-reply/nc:ok

   *  /yp:push-update/yp:datastore-contents/ypatch:yang-patch/
      ypatch:edit

   *  /yp:push-update/yp:datastore-contents/ypatch:yang-patch/
      ypatch:edit/ypatch:value//*

   *  /yp:push-change-update/yp:datastore-contents/ypatch:yang-patch/
      ypatch:edit

   *  /yp:push-change-update/yp:datastore-contents/ypatch:yang-patch/
      ypatch:edit/ypatch:value//*

4.4.  Txid Mechanism Examples

4.4.1.  Initial Configuration Response

4.4.1.1.  with etag

   To retrieve etag attributes across the entire NETCONF server
   configuration, a client might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <get-config txid:etag="?"/>
   </rpc>

   To retrieve etag attributes for a specific ACL using an xpath filter,
   a client might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <get-config>
       <source>
         <running/>
       </source>
       <filter type="xpath"
         xmlns:acl=
           "urn:ietf:params:xml:ns:yang:ietf-access-control-list"
         select="/acl:acls/acl:acl[acl:name='A1']"
         txid:etag="?"/>
     </get-config>
   </rpc>

   To retrieve etag attributes for "acls", but not for "nacm", a client
   might send:




Lindblad                 Expires 4 November 2022               [Page 16]

Internet-Draft                    NCTID                         May 2022


   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <get-config>
       <source>
         <running/>
       </source>
       <filter>
         <acls
           xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
           txid:etag="?"/>
         <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
       </filter>
     </get-config>
   </rpc>

   If the server considers "acls", "acl", "aces" and "acl" to be
   versioned elements, the server's response to the request above might
   look like:

   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:etag="nc5152">
       <acls xmlns=
               "urn:ietf:params:xml:ns:yang:ietf-access-control-list"
             txid:etag="nc5152">
         <acl txid:etag="nc4711">
           <name>A1</name>
           <aces txid:etag="nc4711">
             <ace txid:etag="nc4711">
               <name>R1</name>
               <ipv4>
                 <dscp>AF11</dscp>
               </ipv4>
             </ace>
           </aces>
         </acl>
         <acl txid:etag="nc5152">
           <name>A2</name>
           <aces txid:etag="nc5152">
             <ace txid:etag="nc4711">
               <name>R7</name>
               <ipv4>
                 <protocol>udp</protocol>
               </ipv4>
             </ace>
             <ace txid:etag="nc5152">
               <name>R8</name>



Lindblad                 Expires 4 November 2022               [Page 17]

Internet-Draft                    NCTID                         May 2022


               <ipv4>
                 <source-port>
                   <port>22</port>
                 </source-port>
               </ipv4>
             </ace>
           </aces>
         </acl>
       </acls>
       <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
         <groups>
           <group>
             <name>admin</name>
             <user-name>sakura</user-name>
             <user-name>joe</user-name>
           </group>
         </groups>
       </nacm>
     </data>
   </rpc>

4.4.1.2.  with last-modified

   To retrieve last-modified attributes for "acls", but not for "nacm",
   a client might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <get-config>
       <source>
         <running/>
       </source>
       <filter>
         <acls
           xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
           txid:last-modified="?"/>
         <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
       </filter>
     </get-config>
   </rpc>

   If the server considers "acls", "acl", "aces" and "acl" to be
   versioned elements, the server's response to the request above might
   look like:







Lindblad                 Expires 4 November 2022               [Page 18]

Internet-Draft                    NCTID                         May 2022


   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:last-modified="2022-04-01T12:34:56.789012Z">
       <acls
         xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
         txid:last-modified="2022-04-01T12:34:56.789012Z">
         <acl txid:last-modified="2022-03-20T16:20:11.333444Z">
           <name>A1</name>
             <ace txid:last-modified="2022-03-20T16:20:11.333444Z">
               <name>R1</name>
               <ipv4>
                 <dscp>AF11</dscp>
               </ipv4>
             </ace>
         </acl>
         <acl txid:last-modified="2022-04-01T12:34:56.789012Z">
           <name>A2</name>
           <aces txid:last-modified="2022-04-01T12:34:56.789012Z">
             <ace txid:last-modified="2022-03-20T16:20:11.333444Z">
               <name>R7</name>
               <ipv4>
                 <protocol>udp</protocol>
               </ipv4>
             </ace>
             <ace txid:last-modified="2022-04-01T12:34:56.789012Z">
               <name>R8</name>
               <ipv4>
                 <source-port>
                   <port>22</port>
                 </source-port>
               </ipv4>
             </ace>
           </aces>
         </acl>
       </acls>
       <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
         <groups>
           <group>
             <name>admin</name>
             <user-name>sakura</user-name>
             <user-name>joe</user-name>
           </group>
         </groups>
       </nacm>
     </data>
   </rpc>




Lindblad                 Expires 4 November 2022               [Page 19]

Internet-Draft                    NCTID                         May 2022


4.4.1.3.  with both etag and last-modified

   To retrieve both etag and last-modified attributes for "acls", but
   not for "nacm", a client might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <get-config>
       <source>
         <running/>
       </source>
       <filter>
         <acls
           xmlns=
             "urn:ietf:params:xml:ns:yang:ietf-access-control-list"
           txid:etag="?" txid:last-modified="?"/>
         <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
       </filter>
     </get-config>
   </rpc>

   If the server considers "acls", "acl", "aces" and "acl" to be
   versioned elements, the server's response to the request above might
   look like:

   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:etag="nc5152"
           txid:last-modified="2022-04-01T12:34:56.789012Z">
       <acls
         xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
         txid:etag="nc5152"
         txid:last-modified="2022-04-01T12:34:56.789012Z">
         <acl txid:etag="nc4711"
              txid:last-modified="2022-03-20T16:20:11.333444Z">
           <name>A1</name>
           <aces txid:etag="nc4711"
                 txid:last-modified="2022-03-20T16:20:11.333444Z">
             <ace txid:etag="nc4711"
                  txid:last-modified="2022-03-20T16:20:11.333444Z">
               <name>R1</name>
               <ipv4>
                 <dscp>AF11</dscp>
               </ipv4>
             </ace>
           </aces>
         </acl>



Lindblad                 Expires 4 November 2022               [Page 20]

Internet-Draft                    NCTID                         May 2022


         <acl txid:etag="nc5152"
              txid:last-modified="2022-04-01T12:34:56.789012Z">
           <name>A2</name>
           <aces txid:etag="nc5152"
                 txid:last-modified="2022-04-01T12:34:56.789012Z">
             <ace txid:etag="nc4711"
                  txid:last-modified="2022-03-20T16:20:11.333444Z">
               <name>R7</name>
               <ipv4>
                 <protocol>udp</protocol>
               </ipv4>
             </ace>
             <ace txid:etag="nc5152"
                  txid:last-modified="2022-04-01T12:34:56.789012Z">
               <name>R8</name>
               <ipv4>
                 <source-port>
                   <port>22</port>
                 </source-port>
               </ipv4>
             </ace>
           </aces>
         </acl>
       </acls>
       <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
         <groups>
           <group>
             <name>admin</name>
             <user-name>sakura</user-name>
             <user-name>joe</user-name>
           </group>
         </groups>
       </nacm>
     </data>
   </rpc>

4.4.2.  Configuration Response Pruning

   A NETCONF client that already knows some txid values MAY request that
   the configuration retrieval request is pruned with respect to the
   client's prior knowledge.

   To retrieve only changes for "acls" that do not have the last known
   etag txid value "nc4711", but include the entire configuration for
   "nacm", regardless of txid, a client might send:






Lindblad                 Expires 4 November 2022               [Page 21]

Internet-Draft                    NCTID                         May 2022


   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <get-config>
       <source>
         <running/>
       </source>
       <filter>
         <acls
           xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
           txid:etag="nc4711"/>
         <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
       </filter>
     </get-config>
   </rpc>

   Assuming the NETCONF server configuration is the same as in the
   previous rpc-reply example, the server's response to request above
   might look like:

































Lindblad                 Expires 4 November 2022               [Page 22]

Internet-Draft                    NCTID                         May 2022


   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:etag="nc5152">
       <acls
         xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
         txid:etag="nc5152">
         <acl txid:etag="=">
           <name>A1</name>
         </acl>
         <acl txid:etag="nc5152">
           <name>A2</name>
           <aces txid:etag="nc5152">
             <ace txid:etag="=">
               <name>R7</name>
             </ace>
             <ace txid:etag="nc5152">
               <name>R8</name>
               <ipv4>
                 <source-port>
                   <port>22</port>
                 </source-port>
               </ipv4>
             </ace>
           </aces>
         </acl>
       </acls>
       <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm"/>
         <groups>
           <group>
             <name>admin</name>
             <user-name>sakura</user-name>
             <user-name>joe</user-name>
           </group>
         </groups>
       </nacm>
     </data>
   </rpc>

4.4.3.  Configuration Change

   A client that wishes to update the ace R1 protocol to tcp might send:









Lindblad                 Expires 4 November 2022               [Page 23]

Internet-Draft                    NCTID                         May 2022


   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1">
     <edit-config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
                  xmlns:ietf-netconf-txid=
                   "urn:ietf:params:xml:ns:yang:ietf-netconf-txid">
       <target>
         <running/>
       </target>
       <test-option>test-then-set</test-option>
       <ietf-netconf-txid:with-etag/>
       <config txid:etag="nc5152">
         <acls
           xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
           txid:etag="nc5152">
           <acl txid:etag="nc4711">
             <name>A1</name>
             <aces txid:etag="nc4711">
               <ace txid:etag="nc4711">
                 <matches>
                   <ipv4>
                     <protocol>tcp</protocol>
                   </ipv4>
                 </matches>
               </ace>
             </aces>
           </acl>
         </acls>
       </config>
     </edit-config>
   </rpc>

   The server would update the protocol leaf in the running datastore,
   and return an rpc-reply as follows:

   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <ok txid:etag="nc7688"/>
   </rpc-reply>

   A subsequent get-config request for "acls", with txid:etag="?" might
   then return:

   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:etag="nc7688">
       <acls
         xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"



Lindblad                 Expires 4 November 2022               [Page 24]

Internet-Draft                    NCTID                         May 2022


         txid:etag="nc7688">
         <acl txid:etag="nc7688">
           <name>A1</name>
           <aces txid:etag="nc7688">
             <ace txid:etag="nc7688">
               <name>R1</name>
               <matches>
                 <ipv4>
                   <protocol>tcp</protocol>
                 </ipv4>
               </matches>
             </ace>
           </aces>
         </acl>
         <acl txid:etag="nc6614">
           <name>A2</name>
           <aces txid:etag="nc6614">
             <ace txid:etag="nc4711">
               <name>R7</name>
               <matches>
                 <ipv4>
                   <dscp>AF11</dscp>
                 </ipv4>
               </matches>
             </ace>
             <ace txid:etag="nc5152">
               <name>R8</name>
               <matches>
                 <udp>
                   <source-port>
                     <port>22</port>
                   </source-port>
                 </udp>
               </matches>
             </ace>
             <ace txid:etag="nc6614">
               <name>R9</name>
               <matches>
                 <tcp>
                   <source-port>
                     <port>830</port>
                   </source-port>
                 </tcp>
               </matches>
             </ace>
           </aces>
         </acl>
       </acls>



Lindblad                 Expires 4 November 2022               [Page 25]

Internet-Draft                    NCTID                         May 2022


     </data>
   </rpc>

   In case the server at this point received a configuration change from
   another source, such as a CLI operator, removing ace R8 and R9 in acl
   A2, a subsequent get-config request for acls, with txid:etag="?"
   might then return:

   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:etag="cli2222">
       <acls
         xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
         txid:etag="cli2222">
         <acl txid:etag="nc7688">
           <name>A1</name>
           <aces txid:etag="nc7688">
             <ace txid:etag="nc7688">
               <name>R1</name>
               <matches>
                 <ipv4>
                   <protocol>tcp</protocol>
                 </ipv4>
               </matches>
             </ace>
           </aces>
         </acl>
         <acl txid:etag="cli2222">
           <name>A2</name>
           <aces txid:etag="cli2222">
             <ace txid:etag="nc4711">
               <name>R7</name>
               <matches>
                 <ipv4>
                   <dscp>AF11</dscp>
                 </ipv4>
               </matches>
             </ace>
           </aces>
         </acl>
       </acls>
     </data>
   </rpc>







Lindblad                 Expires 4 November 2022               [Page 26]

Internet-Draft                    NCTID                         May 2022


4.4.4.  Conditional Configuration Change

   If a client wishes to delete acl A1 if and only if its configuration
   has not been altered since this client last synchronized its
   configuration with the server, at which point it received the etag
   "nc7688" for acl A1, regardless of any possible changes to other
   acls, it might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"
        xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0"
        xmlns:ietf-netconf-txid=
          "urn:ietf:params:xml:ns:yang:ietf-netconf-txid">
     <edit-config>
       <target>
         <runnign/>
       </target>
       <test-option>test-then-set</test-option>
       <ietf-netconf-txid:with-etag/>
       <config>
         <acls xmlns=
             "urn:ietf:params:xml:ns:yang:ietf-access-control-list">
           <acl nc:operation="delete"
                txid:etag="nc7688">
             <name>A1</name>
           </acl>
         </acls>
       </config>
     </edit-config>
   </rpc>

   If acl A1 now has the etag txid value "nc7688", as expected by the
   client, the transaction goes through, and the server responds
   something like:

   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <ok txid:etag="nc8008"/>
   </rpc-reply>

   A subsequent get-config request for acls, with txid:etag="?" might
   then return:








Lindblad                 Expires 4 November 2022               [Page 27]

Internet-Draft                    NCTID                         May 2022


   <rpc-reply message-id="1"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <data txid:etag="nc8008">
       <acls
         xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list"
         txid:etag="nc8008">
         <acl txid:etag="cli2222">
           <name>A2</name>
           <aces txid:etag="cli2222">
             <ace txid:etag="nc4711">
               <name>R7</name>
               <matches>
                 <ipv4>
                   <dscp>AF11</dscp>
                 </ipv4>
               </matches>
             </ace>
           </aces>
         </acl>
       </acls>
     </data>
   </rpc>

   In case acl A1 did not have the expected etag txid value "nc7688",
   when the server processed this request, it rejects the transaction,
   and might send:
























Lindblad                 Expires 4 November 2022               [Page 28]

Internet-Draft                    NCTID                         May 2022


   <rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              xmlns:acl=
               "urn:ietf:params:xml:ns:yang:ietf-access-control-list"
              xmlns:ietf-netconf-txid=
                "urn:ietf:params:xml:ns:yang:ietf-netconf-txid">
              message-id="1">
     <rpc-error>
       <error-type>protocol</error-type>
       <error-tag>operation-failed</error-tag>
       <error-severity>error</error-severity>
       <error-info>
         <ietf-netconf-txid:txid-value-mismatch-error-info>
           <ietf-netconf-txid:mismatch-path>
             /acl:acls/acl:acl[acl:name="A1"]
           </ietf-netconf-txid:mismatch-path>
           <ietf-netconf-txid:mismatch-etag-value>
             cli2401
           </ietf-netconf-txid:mismatch-etag-value>
         </ietf-netconf-txid:txid-value-mismatch-error-info>
       </error-info>
     </rpc-error>
   </rpc-reply>

4.4.5.  ETags with Other NETCONF Operations

   The client MAY request that the new etag txid value is returned as an
   attribute on the ok response for a successful commit.  The client
   requests this by adding with-etag to the commit operation.

   For example, a client might send:

   <rpc message-id="1"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
       xmlns:ietf-netconf-txid=
         "urn:ietf:params:xml:ns:yang:ietf-netconf-txid"
     <commit>
       <ietf-netconf-txid:with-etag/>
     </commit>
   </rpc>

   Assuming the server accepted the transaction, it might respond:

   <rpc-reply message-id="1"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
       xmlns:txid="urn:ietf:params:xml:ns:netconf:txid:1.0">
     <ok txid:etag="nc8008"/>
   </rpc-reply>




Lindblad                 Expires 4 November 2022               [Page 29]

Internet-Draft                    NCTID                         May 2022


4.5.  YANG-Push

   A client MAY request that the updates for one or more YANG Push
   subscriptions are annotated with the txid values.  The request might
   look like this:

   <netconf:rpc message-id="101"
                xmlns:netconf="urn:ietf:params:xml:ns:netconf:base:1.0">
     <establish-subscription
         xmlns=
           "urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
         xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-push"
         xmlns:ietf-netconf-txid-yp=
           "urn:ietf:params:xml:ns:yang:ietf-txid-yang-push">
       <yp:datastore
           xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
         ds:running
       </yp:datastore>
       <yp:datastore-xpath-filter
           xmlns:acl=
             "urn:ietf:params:xml:ns:yang:ietf-access-control-list">
         /acl:acls
       </yp:datastore-xpath-filter>
       <yp:periodic>
         <yp:period>500</yp:period>
       </yp:periodic>
       <ietf-netconf-txid-yp:with-etag>
         true
       </ietf-netconf-txid-yp:with-etag>
     </establish-subscription>
   </netconf:rpc>

   In case a client wishes to modify a previous subscription request in
   order to no longer receive YANG Push subscription updates, the
   request might look like this:
















Lindblad                 Expires 4 November 2022               [Page 30]

Internet-Draft                    NCTID                         May 2022


   <rpc message-id="102"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <modify-subscription
         xmlns=
           "urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications"
         xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-push"
         xmlns:txid-yp=
           "urn:ietf:params:xml:ns:yang:ietf-txid-yang-push">
       <id>1011</id>
       <yp:datastore
           xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
         ds:running
       </yp:datastore>
       <txid-yp:txid-etag-request>false FIXME
       </txid-yp:txid-etag-request>
     </modify-subscription>
   </rpc>

   A server might send a subscription update like this:

   <notification
     xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
     <eventTime>2022-04-04T06:00:24.16Z</eventTime>
     <push-change-update
         xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-push">
       <id>89</id>
       <datastore-changes>
         <yang-patch>
           <patch-id>0</patch-id>
           <edit txid:etag="nc8008"> FIXME
             <edit-id>edit1</edit-id>
             <operation>delete</operation>
             <target xmlns:acl=
               "urn:ietf:params:xml:ns:yang:ietf-access-control-list">
               /acl:acls
             </target>
             <value>
               <acl xmlns=
                 "urn:ietf:params:xml:ns:yang:ietf-access-control-list">
                 <name>A1</name>
               </acl>
             </value>
           </edit>
         </yang-patch>
       </datastore-changes>
     </push-change-update>
   </notification>




Lindblad                 Expires 4 November 2022               [Page 31]

Internet-Draft                    NCTID                         May 2022


5.  YANG Modules

5.1.  Base module for txid in NETCONF

 module ietf-netconf-txid {
   yang-version 1.1;
   namespace
     'urn:ietf:params:xml:ns:yang:ietf-netconf-txid';
   prefix ietf-netconf-txid;

   import ietf-netconf {
     prefix nc;
   }

   import ietf-netconf-nmda {
     prefix ncds;
   }

   import ietf-yang-structure-ext {
     prefix sx;
   }

   import ietf-yang-types {
     prefix yang;
   }

   organization
     "IETF NETCONF (Network Configuration) Working Group";

   contact
     "WG Web:   <http://tools.ietf.org/wg/netconf/>
      WG List:  <netconf@ietf.org>

      Author:   Jan Lindblad
                <mailto:jlindbla@cisco.com>";

   description
     "NETCONF Transaction ID aware operations for NMDA.

      Copyright (c) 2021 IETF Trust and the persons identified as
      the document authors.  All rights reserved.

      Redistribution and use in source and binary forms, with or
      without modification, is permitted pursuant to, and subject
      to the license terms contained in, the Simplified BSD License
      set forth in Section 4.c of the IETF Trust's Legal Provisions
      Relating to IETF Documents
      (http://trustee.ietf.org/license-info).



Lindblad                 Expires 4 November 2022               [Page 32]

Internet-Draft                    NCTID                         May 2022


      This version of this YANG module is part of RFC XXXX; see
      the RFC itself for full legal notices.";

   revision 2022-04-01 {
     description
       "Initial revision";
     reference
       "RFC XXXX: Xxxxxxxxx";
   }

   typedef etag-t {
     type string {
       pattern ".* .*" {
         modifier invert-match;
       }
       pattern ".*\".*" {
         modifier invert-match;
       }
       pattern ".*\\.*" {
         modifier invert-match;
       }
     }
     description
       "Unique Entity-tag txid value representing a specific
       transaction.  Could be any string that does not contain
       spaces, double quotes or backslash.  The txid values '?'
       and '=' have special meaning.";
   }

   typedef last-modified-t {
     type union {
       type yang:date-and-time;
       type enumeration {
         enum ?;
         enum =;
       }
     }
     description
       "Last-modified txid value representing a specific transaction.
        The txid values '?' and '=' have special meaning.";
   }

   grouping txid-grouping {
     leaf with-etag {
       type boolean;
       description
         "Indicates whether the client requests the server to include a
          txid:etag txid attribute when the configuration has changed.";



Lindblad                 Expires 4 November 2022               [Page 33]

Internet-Draft                    NCTID                         May 2022


     }
     leaf with-last-modified {
       type boolean;
       description
         "Indicates whether the client requests the server to include a
          txid:last-modified attribute when the configuration has
          changed.";
     }
     description
       "Grouping for txid mechanisms, to be augmented into
        rpcs that modify configuration data stores.";
   }

   augment /nc:edit-config/nc:input {
     uses txid-grouping;
     description
       "Injects the txid mechanisms into the
       edit-config operation";
   }

   augment /nc:commit/nc:input {
     uses txid-grouping;
     description
       "Injects the txid mechanisms into the
       commit operation";
   }

   augment /ncds:edit-data/ncds:input {
     uses txid-grouping;
     description
       "Injects the txid mechanisms into the
       edit-data operation";

   sx:structure txid-value-mismatch-error-info {
     container txid-value-mismatch-error-info {
       description
          "This error is returned by a NETCONF server when a client
           sends a configuration change request, with the additonal
           condition that the server aborts the transaction if the
           server's configuration has changed from what the client
           expects, and the configuration is found not to actually
           not match the client's expectation.";
       leaf mismatch-path {
         type instance-identifier;
         description
           "Indicates the YANG path to the element with a mismatching
            etag txid value.";
       }



Lindblad                 Expires 4 November 2022               [Page 34]

Internet-Draft                    NCTID                         May 2022


       leaf mismatch-etag-value {
         type etag-t;
         description
           "Indicates server's txid value of the etag
           attribute for one mismatching element.";
       }
       leaf mismatch-last-modified-value {
         type last-modified-t;
         description
           "Indicates server's txid value of the last-modified
           attribute for one mismatching element.";
       }
     }
   }
 }

5.2.  Additional support for txid in YANG-Push


































Lindblad                 Expires 4 November 2022               [Page 35]

Internet-Draft                    NCTID                         May 2022


   module ietf-netconf-txid-yang-push {
     yang-version 1.1;
     namespace
       'urn:ietf:params:xml:ns:yang:ietf-netconf-txid-yang-push';
     prefix ietf-netconf-txid-yp;

     import ietf-subscribed-notifications {
       prefix sn;
       reference
         "RFC 8639: Subscription to YANG Notifications";
     }

     import ietf-netconf-txid {
       prefix ietf-netconf-txid;
       reference
         "RFC XXXX: Xxxxxxxxx";//FIXME
     }

     revision 2022-04-01 {
       description
         "Initial revision";
       reference
         "RFC XXXX: Xxxxxxxxx";
     }

     augment "/sn:establish-subscription/sn:input" {
       description
         "This augmentation adds additional subscription parameters
           that apply specifically to datastore updates to RPC input.";
       uses ietf-netconf-txid:txid-grouping;
     }
     augment "/sn:modify-subscription/sn:input" {
       description
         "This augmentation adds additional subscription parameters
           specific to datastore updates.";
       uses ietf-netconf-txid:txid-grouping;
     }
     augment "/sn:subscriptions/sn:subscription" {
       description
         "This augmentation adds additional subscription parameters
           specific to datastore updates.";
       uses ietf-netconf-txid:txid-grouping;
     }
   }







Lindblad                 Expires 4 November 2022               [Page 36]

Internet-Draft                    NCTID                         May 2022


6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document registers the following capability identifier URN in
   the 'Network Configuration Protocol (NETCONF) Capability URNs'
   registry:

   FIXME Attributes vs. leafs in req.  FIXME YP updates

     urn:ietf:params:netconf:capability:txid:1.0

   This document registers two XML namespace URNs in the 'IETF XML
   registry', following the format defined in RFC 3688
   (https://tools.ietf.org/html/rfc3688).

     URI: urn:ietf:params:xml:ns:netconf:txid:1.0

     URI: urn:ietf:params:xml:ns:yang:ietf-netconf-txid

     Registrant Contact: The NETCONF WG of the IETF.

     XML: N/A, the requested URIs are XML namespaces.

   This document registers one module name in the 'YANG Module Names'
   registry, defined in RFC 6020 (https://tools.ietf.org/html/rfc6020).

     name: ietf-netconf-txid

     prefix: ietf-netconf-txid

     namespace: urn:ietf:params:xml:ns:yang:ietf-netconf-txid

     RFC: XXXX

8.  Changes

8.1.  Major changes in -02 since -01

   FIXME

8.2.  Major changes in -01 since -00

   *  Updated the text on numerous points in order to answer questions
      that appeared on the mailing list.




Lindblad                 Expires 4 November 2022               [Page 37]

Internet-Draft                    NCTID                         May 2022


   *  Changed the document structure into a general transaction id part
      and one etag specific part.

   *  Renamed entag attribute to etag, prefix to txid, namespace to
      urn:ietf:params:xml:ns:yang:ietf-netconf-txid.

   *  Set capability string to
      urn:ietf:params:netconf:capability:txid:1.0

   *  Changed YANG module name, namespace and prefix to match names
      above.

   *  Harmonized/slightly adjusted etag value space with RFC 7232 and
      RFC 8040.

   *  Removed all text discussing etag values provided by the client
      (although this is still an interesting idea, if you ask the
      author)

   *  Clarified the etag attribute mechanism, especially when it comes
      to matching against non-versioned elements, its cascading upwards
      in the tree and secondary effects from when- and choice-
      statements.

   *  Added a mechanism for returning the server assigned etag value in
      get-config and get-data.

   *  Added section describing how the NETCONF discard-changes, copy-
      config, delete-config and commit operations work with respect to
      etags.

   *  Added IANA Considerations section.

   *  Removed all comments about open questions.

9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.






Lindblad                 Expires 4 November 2022               [Page 38]

Internet-Draft                    NCTID                         May 2022


Acknowledgments

   The author wishes to thank Benoit Claise for making this work happen,
   and the following individuals, who all provided helpful comments: Per
   Andersson, Kent Watsen, Andy Bierman, Robert Wilton, Qiufang Ma.

Author's Address

   Jan Lindblad
   Cisco Systems

   Email: jlindbla@cisco.com







































Lindblad                 Expires 4 November 2022               [Page 39]
